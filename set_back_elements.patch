diff --git a/autoload.php b/autoload.php
index dfcd3b8..f97de2d 100644
--- a/autoload.php
+++ b/autoload.php
@@ -1,7 +1,7 @@
 <?php
 
 /*
- * This file is part of the Marlon Ogone package.
+ * This file is part of the Marlon PostFinance package.
  *
  * (c) Marlon BVBA <info@marlon.be>
  *
@@ -14,6 +14,6 @@ require_once __DIR__ . '/vendor/symfony/src/Symfony/Component/ClassLoader/Univer
 
 $loader = new UniversalClassLoader;
 $loader->registerNamespaces(array(
-    'Ogone' => __DIR__ . '/lib/'
+    'PostFinance' => __DIR__ . '/lib/'
 ));
 $loader->register();
\ No newline at end of file
diff --git a/lib/PostFinance/DirectLink/Alias.php b/lib/PostFinance/DirectLink/Alias.php
new file mode 100644
index 0000000..1148bcf
--- /dev/null
+++ b/lib/PostFinance/DirectLink/Alias.php
@@ -0,0 +1,42 @@
+<?php
+/*
+ * This file is part of the Wysow PostFinance package.
+ *
+ * (c) Gaultier Boniface <gboniface@wysow.fr>
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\DirectLink;
+
+use InvalidArgumentException;
+
+class Alias {
+
+    /** @var string */
+    private $alias;
+
+    public function __construct($alias)
+    {
+        if(empty($alias)) {
+            throw new InvalidArgumentException("Alias cannot be empty");
+        }
+
+        if(strlen($alias) > 50) {
+            throw new InvalidArgumentException("Alias is too long");
+        }
+
+        if(preg_match('/[^a-zA-Z0-9_-]/', $alias)) {
+            throw new InvalidArgumentException("Alias cannot contain special characters");
+        }
+
+        $this->alias = $alias;
+    }
+
+    public function __toString()
+    {
+        return (string) $this->alias;
+    }
+}
diff --git a/lib/PostFinance/DirectLink/CreateAliasRequest.php b/lib/PostFinance/DirectLink/CreateAliasRequest.php
new file mode 100644
index 0000000..f94d027
--- /dev/null
+++ b/lib/PostFinance/DirectLink/CreateAliasRequest.php
@@ -0,0 +1,44 @@
+<?php
+/*
+ * This file is part of the Wysow PostFinance package.
+ *
+ * (c) Gaultier Boniface <gboniface@wysow.fr>
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\DirectLink;
+
+use PostFinance\AbstractRequest;
+use PostFinance\ShaComposer\ShaComposer;
+
+class CreateAliasRequest extends AbstractRequest {
+
+    const TEST = "https://secure.PostFinance.com/ncol/test/alias_gateway_utf8.asp";
+    const PRODUCTION = "https://secure.PostFinance.com/ncol/prod/alias_gateway_utf8.asp";
+
+    public function __construct(ShaComposer $shaComposer)
+    {
+        $this->shaComposer = $shaComposer;
+        $this->PostFinanceUri = self::TEST;
+    }
+
+    public function getRequiredFields()
+    {
+        return array(
+            'pspid', 'accepturl', 'exceptionurl'
+        );
+    }
+
+    public function getValidPostFinanceUris()
+    {
+        return array(self::TEST, self::PRODUCTION);
+    }
+
+    public function setAlias(Alias $alias)
+    {
+        $this->parameters['alias'] = (string) $alias;
+    }
+}
diff --git a/lib/PostFinance/DirectLink/CreateAliasResponse.php b/lib/PostFinance/DirectLink/CreateAliasResponse.php
new file mode 100644
index 0000000..d439030
--- /dev/null
+++ b/lib/PostFinance/DirectLink/CreateAliasResponse.php
@@ -0,0 +1,41 @@
+<?php
+/*
+ * This file is part of the Wysow PostFinance package.
+ *
+ * (c) Gaultier Boniface <gboniface@wysow.fr>
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\DirectLink;
+
+use PostFinance\AbstractResponse;
+use PostFinance\ShaComposer\ShaComposer;
+
+class CreateAliasResponse extends AbstractResponse {
+
+    const STATUS_OK = 0;
+    const STATUS_NOK = 1;
+    const STATUS_UPDATED = 2;
+
+    /**
+     * Checks if the response is valid
+     * @return bool
+     */
+    public function isValid(ShaComposer $shaComposer)
+    {
+        return $shaComposer->compose($this->parameters) == $this->shaSign;
+    }
+
+    public function isSuccessful()
+    {
+        return in_array($this->getParam('STATUS'), array(self::STATUS_OK, self::STATUS_UPDATED));
+    }
+
+    public function getAlias()
+    {
+        return new Alias($this->parameters['ALIAS']);
+    }
+}
diff --git a/lib/PostFinance/DirectLink/DirectLinkPaymentRequest.php b/lib/PostFinance/DirectLink/DirectLinkPaymentRequest.php
new file mode 100644
index 0000000..939c5c4
--- /dev/null
+++ b/lib/PostFinance/DirectLink/DirectLinkPaymentRequest.php
@@ -0,0 +1,72 @@
+<?php
+/*
+ * This file is part of the Wysow PostFinance package.
+ *
+ * (c) Gaultier Boniface <gboniface@wysow.fr>
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\DirectLink;
+
+use PostFinance\AbstractPaymentRequest;
+use PostFinance\ShaComposer\ShaComposer;
+use InvalidArgumentException;
+
+class DirectLinkPaymentRequest extends AbstractPaymentRequest {
+
+    const TEST = "https://secure.PostFinance.com/ncol/test/orderdirect.asp";
+    const PRODUCTION = "https://secure.PostFinance.com/ncol/prod/orderdirect.asp";
+
+    public function __construct(ShaComposer $shaComposer)
+    {
+        $this->shaComposer = $shaComposer;
+        $this->PostFinanceUri = self::TEST;
+    }
+
+    public function getRequiredFields()
+    {
+        return array(
+            'pspid', 'currency', 'amount', 'orderid', 'userid', 'pswd'
+        );
+    }
+
+    public function getValidPostFinanceUris()
+    {
+        return array(self::TEST, self::PRODUCTION);
+    }
+
+    public function setUserId($userid)
+    {
+        if(strlen($userid) < 8) {
+            throw new InvalidArgumentException("User ID is too short");
+        }
+        $this->parameters['userid'] = $userid;
+    }
+
+    /** Alias for setPswd() */
+    public function setPassword($password)
+    {
+        $this->setPswd($password);
+    }
+
+    public function setPswd($password)
+    {
+        if(strlen($password) < 8) {
+            throw new InvalidArgumentException("Password is too short");
+        }
+        $this->parameters['pswd'] = $password;
+    }
+
+    public function setAlias(Alias $alias)
+    {
+        $this->parameters['alias'] = $alias->__toString();
+    }
+
+    public function setEci(Eci $eci)
+    {
+        $this->parameters['eci'] = (string) $eci;
+    }
+}
diff --git a/lib/PostFinance/DirectLink/DirectLinkPaymentResponse.php b/lib/PostFinance/DirectLink/DirectLinkPaymentResponse.php
new file mode 100644
index 0000000..9b312d5
--- /dev/null
+++ b/lib/PostFinance/DirectLink/DirectLinkPaymentResponse.php
@@ -0,0 +1,54 @@
+<?php
+/*
+ * This file is part of the Wysow PostFinance package.
+ *
+ * (c) Gaultier Boniface <gboniface@wysow.fr>
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\DirectLink;
+
+use PostFinance\AbstractPaymentResponse;
+use SimpleXMLElement;
+use InvalidArgumentException;
+
+class DirectLinkPaymentResponse extends AbstractPaymentResponse {
+
+    public function __construct($xml_string)
+    {
+        libxml_use_internal_errors(true);
+
+        if(simplexml_load_string($xml_string)) {
+
+            $xmlResponse = new SimpleXMLElement($xml_string);
+
+            $attributesArray = $this->xmlAttributesToArray($xmlResponse->attributes());
+
+            // use lowercase internally
+            $attributesArray = array_change_key_case($attributesArray, CASE_UPPER);
+
+            // filter request for PostFinance parameters
+            $this->parameters = $this->filterRequestParameters($attributesArray);
+
+        } else {
+
+            throw new InvalidArgumentException("No valid XML-string given");
+        }
+    }
+
+    private function xmlAttributesToArray($attributes)
+    {
+        $attributesArray = array();
+
+        if(count($attributes)) {
+            foreach($attributes as $key => $value) {
+                $attributesArray[(string)$key] = (string)$value;
+            }
+        }
+
+        return $attributesArray;
+    }
+}
diff --git a/lib/PostFinance/DirectLink/Eci.php b/lib/PostFinance/DirectLink/Eci.php
new file mode 100644
index 0000000..457e5cf
--- /dev/null
+++ b/lib/PostFinance/DirectLink/Eci.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace PostFinance\DirectLink;
+
+/**
+ * Class Eci
+ *
+ * Electronic Commerce Indicator. The ECI indicates the security level at which the payment information is processed between the cardholder and merchant.
+ * A default ECI value can be set in the Technical Information page. An ECI value sent along in the transaction, will overwrite the default ECI value.
+ * It is the merchant's responsibility to give correct ECI values for the transactions. For e-Commerce, our system sets ECI value 5, 6 or 7 depending on the 3-D Secure authentication result.
+ */
+class Eci
+{
+    /** The merchant took the customer's credit card and swiped it through a machine that read the magnetic strip data of the card. */
+    const SWIPED = 0;
+
+    /** The merchant received the customer's financial details over the phone or via fax/mail, but does not have the customer's card at hand. */
+    const MANUALLY_KEYED = 1;
+
+    /** The customer's first transaction was a Mail Order / Telephone Order transaction, i.e. the customer gave his financial details over the phone or via mail/fax to the merchant. The merchant either stored the details himself or had these details stored in our system using an Alias and is performing another transaction for the same customer (recurring transaction). */
+    const RECURRENT_MOTO = 2;
+
+    /** Partial payment of goods/services that have already been delivered, but will be paid for in several spread payments. */
+    const INSTALLMENT_PAYMENTS = 3;
+
+    /** The customer is physically present in front of the merchant. The merchant has the customer's card at hand. The card details are manually entered, the card is not swiped through a machine. */
+    const MANUALLY_KEYED_CARD_PRESENT = 4;
+
+    /** The cardholder's 3-D Secure identification was successful, i.e. there was a full authentication. (Full thumbs up) */
+    const CARDHOLDER_IDENTIFICATION_SUCCESSFUL = 5;
+
+    /** Merchant supports identification but not cardholder, The merchant has a 3-D Secure contract, but the cardholder's card is not 3-D Secure or is 3-D Secure but the cardholder is not yet in possession of the PIN (Half thumbs up). Conditional payment guarantee rules apply. */
+    const MERCHANT_IDENTIFICATION_3DSECURE = 6;
+
+    /** The merchant received the customer's financial details via a secure (SSL encrypted) website (either the merchant's website or our secure platform). */
+    const ECOMMERCE_WITH_SSL = 7;
+
+    /** The customer's first transaction was an e-Commerce transaction, i.e. the customer entered his financial details himself on a secure website (either the merchant's website or our secure platform). The merchant either stored the details himself or had these details stored in our system using an Alias and is now performing another transaction for the same customer (recurring transaction), using the Alias details. */
+    const ECOMMERCE_RECURRING = 9;
+
+    /** @var int */
+    protected $code;
+
+    public function __construct($eciCode)
+    {
+        $this->code = $eciCode;
+    }
+
+    public function __toString()
+    {
+        return (string) $this->code;
+    }
+}
diff --git a/lib/PostFinance/Subscription/SubscriptionPaymentRequest.php b/lib/PostFinance/Subscription/SubscriptionPaymentRequest.php
new file mode 100644
index 0000000..d3d93fc
--- /dev/null
+++ b/lib/PostFinance/Subscription/SubscriptionPaymentRequest.php
@@ -0,0 +1,177 @@
+<?php
+
+namespace PostFinance\Subscription;
+
+use InvalidArgumentException;
+use DateTime;
+use PostFinance\Ecommerce\EcommercePaymentRequest;
+
+class SubscriptionPaymentRequest extends EcommercePaymentRequest {
+
+    /**
+     * Set amount in cents, eg EUR 12.34 is written as 1234
+     * For subscriptions an amount of 0 can be selected, however this feature must first be enabled by PostFinance for your account
+     */
+    public function setAmount($amount)
+    {
+        if(!is_int($amount)) {
+            throw new InvalidArgumentException("Integer expected. Amount is always in cents");
+        }
+        if($amount < 0) {
+            throw new InvalidArgumentException("Amount must be a positive number or 0");
+        }
+        if($amount >= 1.0E+15) {
+            throw new InvalidArgumentException("Amount is too high");
+        }
+
+        $this->parameters['amount'] = $amount;
+
+    }
+
+    /**
+     * Unique identifier of the subscription. The subscription id must be assigned dynamically.
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param string $subscriptionId (maxlength 50)
+     */
+    public function setSubscriptionId($subscriptionId)
+    {
+        if(strlen($subscriptionId) > 50) {
+            throw new InvalidArgumentException("Subscription id cannot be longer than 50 characters");
+        }
+        if(preg_match('/[^a-zA-Z0-9_-]/', $subscriptionId)) {
+            throw new InvalidArgumentException("Subscription id cannot contain special characters");
+        }
+        $this->parameters['subscription_id'] = $subscriptionId;
+    }
+
+    /**
+     * Amount of the subscription (can be different from the amount of the original transaction)
+     * multiplied by 100, since the format of the amount must not contain any decimals or other separators.
+     *
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param integer $amount
+     */
+    public function setSubscriptionAmount($amount)
+    {
+        if(!is_int($amount)) {
+            throw new InvalidArgumentException("Integer expected. Amount is always in cents");
+        }
+        if($amount <= 0) {
+            throw new InvalidArgumentException("Amount must be a positive number");
+        }
+        if($amount >= 1.0E+15) {
+            throw new InvalidArgumentException("Amount is too high");
+        }
+        $this->parameters['sub_amount'] = $amount;
+    }
+
+    /**
+     * Order description
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param string $description (maxlength 100)
+     */
+    public function setSubscriptionDescription($description)
+    {
+        if(strlen($description) > 100) {
+            throw new InvalidArgumentException("Subscription description cannot be longer than 100 characters");
+        }
+        if(preg_match('/[^a-zA-Z0-9_ -]/', $description)) {
+            throw new InvalidArgumentException("Subscription description cannot contain special characters");
+        }
+        $this->parameters['sub_com'] = $description;
+    }
+
+    /**
+     * OrderID for subscription payments
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param string $orderId (maxlength 40)
+     */
+    public function setSubscriptionOrderId($orderId)
+    {
+        if(strlen($orderId) > 40) {
+            throw new InvalidArgumentException("Subscription order id cannot be longer than 40 characters");
+        }
+        if(preg_match('/[^a-zA-Z0-9_-]/', $orderId)) {
+            throw new InvalidArgumentException("Subscription order id cannot contain special characters");
+        }
+        $this->parameters['sub_orderid'] = $orderId;
+    }
+
+    /**
+     * Set subscription payment interval
+     * @author René de Kat <renedekat@9lives-development.com>
+     */
+    public function setSubscriptionPeriod(SubscriptionPeriod $period)
+    {
+        $this->parameters['sub_period_unit'] = $period->getUnit();
+        $this->parameters['sub_period_number'] = $period->getInterval();
+        $this->parameters['sub_period_moment'] = $period->getMoment();
+    }
+
+
+    /**
+     * Subscription start date
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param DateTime $data 	Startdate of the subscription.
+     */
+    public function setSubscriptionStartdate(DateTime $date)
+    {
+        $this->parameters['sub_startdate'] = $date->format('Y-m-d');
+    }
+
+    /**
+     * Subscription end date
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param DateTime $data 	Enddate of the subscription.
+     */
+    public function setSubscriptionEnddate(DateTime $date)
+    {
+        $this->parameters['sub_enddate'] = $date->format('Y-m-d');
+    }
+
+    /**
+     * Set subscription status
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param integer $status	0 = inactive, 1 = active
+     */
+    public function setSubscriptionStatus($status)
+    {
+        if (!in_array($status, array(0, 1))) {
+            throw new InvalidArgumentException("Invalid status specified for subscription. Possible values: 0 = inactive, 1 = active");
+        }
+        $this->parameters['sub_status'] = $status;
+    }
+
+    /**
+     * Set comment for merchant
+     * @author René de Kat <renedekat@9lives-development.com>
+     *
+     * @param string $comment
+     */
+    public function setSubscriptionComment($comment)
+    {
+        if(strlen($comment) > 200) {
+            throw new InvalidArgumentException("Subscription comment cannot be longer than 200 characters");
+        }
+        if(preg_match('/[^a-zA-Z0-9_ -]/', $comment)) {
+            throw new InvalidArgumentException("Subscription comment cannot contain special characters");
+        }
+        $this->parameters['sub_comment'] = $comment;
+    }
+
+    public function getRequiredFields()
+    {
+        return array(
+            'pspid', 'currency', 'orderid',
+            'subscription_id', 'sub_amount', 'sub_com', 'sub_orderid', 'sub_period_unit',
+            'sub_period_number', 'sub_period_moment','sub_startdate', 'sub_enddate', 'sub_status'
+        );
+    }
+}
diff --git a/lib/PostFinance/Subscription/SubscriptionPeriod.php b/lib/PostFinance/Subscription/SubscriptionPeriod.php
new file mode 100644
index 0000000..ce2aacc
--- /dev/null
+++ b/lib/PostFinance/Subscription/SubscriptionPeriod.php
@@ -0,0 +1,138 @@
+<?php
+
+namespace PostFinance\Subscription;
+
+use InvalidArgumentException;
+
+class SubscriptionPeriod {
+
+    /** @var string */
+    const UNIT_DAILY = 'd';
+
+    /** @var string */
+    const UNIT_WEEKLY = 'ww';
+
+    /** @var string */
+    const UNIT_MONTHLY = 'm';
+
+    /**
+     * @var string
+     * ‘d’ = daily, ‘ww’ = weekly, ‘m’ = monthly
+     */
+    protected $unit;
+
+    /**
+     * @var int
+     * Interval between each occurrence of the subscription payments
+     */
+    protected $interval;
+
+    /**
+     * @var int
+     * Depending on sub_period_unit
+     * Daily (d):
+     *      interval in days
+     * Weekly (ww):
+     *      1=Sunday, … 7=Saturday
+     * Monthly (m):
+     *      day of the month
+     */
+    protected $moment;
+
+    /**
+     * @param string $unit
+     * @param int $interval
+     * @param int $moment
+     * @throws InvalidArgumentException
+     */
+    public function __construct($unit, $interval, $moment) {
+        $this->setUnit($unit);
+        $this->setInterval($interval);
+        $this->setMoment($moment);
+    }
+
+    /**
+     * @return string
+     */
+    public function getUnit() {
+        return $this->unit;
+    }
+
+    /**
+     * @param string $unit
+     * @throws InvalidArgumentException
+     */
+    public function setUnit($unit) {
+        if (!in_array($unit, array(self::UNIT_DAILY, self::UNIT_WEEKLY, self::UNIT_MONTHLY))) {
+            throw new InvalidArgumentException("Subscription period unit should be '".self::UNIT_DAILY."' (daily), '".self::UNIT_WEEKLY."' (weekly) or '".self::UNIT_MONTHLY."' (monthly)");
+        }
+
+        if(self::UNIT_WEEKLY === $unit) {
+            if($this->moment > 7) {
+                throw new InvalidArgumentException('The unit cannot be set to weekly while the moment > 7');
+            }
+        } elseif(self::UNIT_MONTHLY === $unit && $this->moment > 28) {
+            throw new InvalidArgumentException('The unit cannot be set to monthly while the moment > 28');
+        }
+        $this->unit = $unit;
+    }
+
+    /**
+     * @return int
+     */
+    public function getInterval() {
+        return $this->interval;
+    }
+
+    /**
+     * @param int $interval
+     * @throws InvalidArgumentException
+     */
+    public function setInterval($interval) {
+        if(!is_int($interval)) {
+            throw new InvalidArgumentException("Integer expected for interval");
+        }
+        if($interval < 0) {
+            throw new InvalidArgumentException("Interval must be a positive number > 0");
+        }
+        if($interval >= 1.0E+15) {
+            throw new InvalidArgumentException("Interval is too high");
+        }
+        $this->interval = $interval;
+    }
+
+    /**
+     * @return int
+     */
+    public function getMoment() {
+        return $this->moment;
+    }
+
+    /**
+     * @param int $moment
+     * @throws InvalidArgumentException
+     */
+    public function setMoment($moment) {
+        if(!is_int($moment)) {
+            throw new InvalidArgumentException("Integer expected for moment");
+        }
+        if($moment <= 0) {
+            throw new InvalidArgumentException("Moment must be a positive number");
+        }
+        if($moment >= 1.0E+15) {
+            throw new InvalidArgumentException("Interval is too high");
+        }
+
+        if (self::UNIT_WEEKLY == $this->unit) {
+            // Valid values are 1 to 7
+            if ($moment > 7) {
+                throw new InvalidArgumentException("Moment should be 1 (Sunday), 2, 3 .. 7 (Saturday)");
+            }
+        } elseif (self::UNIT_MONTHLY == $this->unit && $moment > 28) {
+            // We will not allow a day of month > 28
+            throw new InvalidArgumentException("Moment can't be larger than 29. Last day for month allowed is 28.");
+        }
+
+        $this->moment = $moment;
+    }
+}
diff --git a/tests/Ogone/Tests/DirectLink/AliasTest.php b/tests/Ogone/Tests/DirectLink/AliasTest.php
new file mode 100644
index 0000000..eeafb56
--- /dev/null
+++ b/tests/Ogone/Tests/DirectLink/AliasTest.php
@@ -0,0 +1,58 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\DirectLink;
+
+use PostFinance\DirectLink\Alias;
+
+class AliasTest extends \TestCase
+{
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function AliasCannotBeNull()
+    {
+        new Alias(null);
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function AliasCannotBeAnEmptyString()
+    {
+        new Alias('');
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function AliasIsMax50Characters()
+    {
+        new Alias(str_repeat('X', 51));
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function AliasIsAlphaNumeric()
+    {
+        new Alias('some alias with spaces, dots (.), etc');
+    }
+
+    /** @test */
+    public function CanBeRepresentedAsString()
+    {
+        $this->assertEquals('test123', (string) new Alias('test123'));
+    }
+}
diff --git a/tests/Ogone/Tests/DirectLink/CreateAliasRequestTest.php b/tests/Ogone/Tests/DirectLink/CreateAliasRequestTest.php
new file mode 100644
index 0000000..7140b50
--- /dev/null
+++ b/tests/Ogone/Tests/DirectLink/CreateAliasRequestTest.php
@@ -0,0 +1,96 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\DirectLink;
+
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+use PostFinance\DirectLink\CreateAliasRequest;
+use PostFinance\DirectLink\Alias;
+
+class CreateAliasRequestTest extends \TestCase {
+
+    /**
+     * @test
+     */
+    public function IsValidWhenRequiredFieldsAreFilledIn()
+    {
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function isInvalidWithNonPostFinanceUrl()
+    {
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->setPostFinanceUri('http://example.com');
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     */
+    public function isValidWithPostFinanceUrl()
+    {
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->setPostFinanceUri(CreateAliasRequest::PRODUCTION);
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \RuntimeException
+     */
+    public function IsInvalidWhenFieldsAreMissing()
+    {
+        $aliasRequest = new CreateAliasRequest(new FakeShaComposer);
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     */
+    public function IsValidWithAliasSet()
+    {
+        $alias = new Alias('customer_123');
+
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->setAlias($alias);
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function IsInvalidWithTooLongAlias()
+    {
+        $alias = new Alias(str_repeat('repeat', 10));
+
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->setAlias($alias);
+        $aliasRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function IsInvalidWithAliasWrongCharacter()
+    {
+        $alias = new Alias('customer_#!§?');
+
+        $aliasRequest = $this->provideMinimalAliasRequest();
+        $aliasRequest->setAlias($alias);
+        $aliasRequest->validate();
+    }
+}
diff --git a/tests/Ogone/Tests/DirectLink/CreateAliasResponseTest.php b/tests/Ogone/Tests/DirectLink/CreateAliasResponseTest.php
new file mode 100644
index 0000000..19248d2
--- /dev/null
+++ b/tests/Ogone/Tests/DirectLink/CreateAliasResponseTest.php
@@ -0,0 +1,78 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\DirectLink;
+
+use PostFinance\DirectLink\CreateAliasResponse;
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+
+class CreateAliasResponseTest extends \TestCase {
+
+    /** @test */
+    public function CanBeVerified()
+    {
+        $aRequest = $this->provideRequest();
+
+        $createAliasResponse = new CreateAliasResponse($aRequest);
+        $this->assertTrue($createAliasResponse->isValid(new FakeShaComposer));
+    }
+
+    /**
+     * @test
+     * @expectedException InvalidArgumentException
+     */
+    public function CannotExistWithoutShaSign()
+    {
+        $createAliasResponse = new CreateAliasResponse(array());
+    }
+
+    /** @test */
+    public function ParametersCanBeRetrieved()
+    {
+        $aRequest = $this->provideRequest();
+
+        $createAliasResponse = new CreateAliasResponse($aRequest);
+        $this->assertEquals($aRequest['orderID'], $createAliasResponse->getParam('orderid'));
+    }
+
+    /** @test */
+    public function ChecksStatus()
+    {
+        $aRequest = $this->provideRequest();
+
+        $createAliasResponse = new CreateAliasResponse($aRequest);
+        $this->assertTrue($createAliasResponse->isSuccessful());
+    }
+
+    /** @test */
+    public function AliasIsEqual()
+    {
+        $aRequest = $this->provideRequest();
+        $createAliasResponse = new CreateAliasResponse($aRequest);
+        $alias = $createAliasResponse->getAlias();
+        $this->assertEquals('customer_123', $alias->__toString());
+    }
+
+    /**
+     * Helper method to setup a request array
+     */
+    private function provideRequest()
+    {
+        return array(
+            'SHASIGN' => FakeShaComposer::FAKESHASTRING,
+            'UNKNOWN_PARAM' => false, /* unkown parameter, should be filtered out */
+            'status' => 0,
+            'orderID' => '48495482424',
+            'alias' => 'customer_123',
+            'cardno' => 'xxx-xxxxxxxxxx-xx'
+        );
+    }
+
+}
diff --git a/tests/Ogone/Tests/DirectLink/DirectLinkPaymentRequestTest.php b/tests/Ogone/Tests/DirectLink/DirectLinkPaymentRequestTest.php
new file mode 100644
index 0000000..8c90b68
--- /dev/null
+++ b/tests/Ogone/Tests/DirectLink/DirectLinkPaymentRequestTest.php
@@ -0,0 +1,101 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\DirectLink;
+
+use PostFinance\Tests;
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+use PostFinance\DirectLink\DirectLinkPaymentRequest;
+use PostFinance\DirectLink\Alias;
+
+class DirectLinkPaymentRequestTest extends \TestCase {
+
+    /** @test */
+    public function IsValidWhenRequiredFieldsAreFilledIn()
+    {
+        $directLinkPaymentRequest = $this->provideMinimalDirectLinkPaymentRequest();
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \RuntimeException
+     */
+    public function IsInvalidWhenFieldsAreMissing()
+    {
+        $directLinkPaymentRequest = new DirectLinkPaymentRequest(new FakeShaComposer);
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function isInvalidWithNonPostFinanceUrl()
+    {
+        $directLinkPaymentRequest = $this->provideMinimalDirectLinkPaymentRequest();
+        $directLinkPaymentRequest->setPostFinanceUri('http://example.com');
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     */
+    public function isValidWithPostFinanceUrl()
+    {
+        $directLinkPaymentRequest = $this->provideMinimalDirectLinkPaymentRequest();
+        $directLinkPaymentRequest->setPostFinanceUri(DirectLinkPaymentRequest::PRODUCTION);
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     */
+    public function isValidWhenAliasSet()
+    {
+        $alias = new Alias('customer_123');
+
+        $directLinkPaymentRequest = $this->provideMinimalDirectLinkPaymentRequest();
+        $directLinkPaymentRequest->setAlias($alias);
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function IsInvalidWithTooLongAlias()
+    {
+        $alias = new Alias(str_repeat('repeat', 10));
+
+        $directLinkPaymentRequest = $this->provideMinimalDirectLinkPaymentRequest();
+        $directLinkPaymentRequest->setAlias($alias);
+        $directLinkPaymentRequest->validate();
+    }
+
+    /**
+     * @test
+     * @dataProvider provideBadParameters
+     * @expectedException \InvalidArgumentException
+     */
+    public function BadParametersCauseExceptions($method, $value)
+    {
+        $directLinkPaymentRequest = new DirectLinkPaymentRequest(new FakeShaComposer);
+        $directLinkPaymentRequest->$method($value);
+    }
+
+    public function provideBadParameters()
+    {
+        return array(
+            array('setPswd', '12'),
+            array('setUserid', '12')
+        );
+    }
+}
diff --git a/tests/Ogone/Tests/DirectLink/DirectLinkPaymentResponseTest.php b/tests/Ogone/Tests/DirectLink/DirectLinkPaymentResponseTest.php
new file mode 100644
index 0000000..f298342
--- /dev/null
+++ b/tests/Ogone/Tests/DirectLink/DirectLinkPaymentResponseTest.php
@@ -0,0 +1,134 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\DirectLink;
+
+use PostFinance\Tests;
+use PostFinance\DirectLink\DirectLinkPaymentResponse;
+
+class DirectLinkPaymentResponseTest extends \TestCase {
+
+    /**
+     * @test
+     * @expectedException InvalidArgumentException
+     */
+    public function CantExistWithoutXmlFile()
+    {
+        $paymentResponse = new DirectLinkPaymentResponse('');
+    }
+
+    /** @test */
+    public function ParametersCanBeRetrieved()
+    {
+        $xml = $this->provideXML();
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+        $this->assertEquals('123', $paymentResponse->getParam('orderid'));
+    }
+
+    /**
+     * @test
+     * @expectedException InvalidArgumentException
+     */
+    public function RequestIsFilteredFromNonPostFinanceParameters()
+    {
+        $xml = $this->provideXML();
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+        $paymentResponse->getParam('unknown_param');
+    }
+
+    /**
+     * @test
+     * @expectedException InvalidArgumentException
+     */
+    public function ChecksInvalidXml()
+    {
+        $xml = $this->provideInvalidXML();
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+    }
+
+    /** @test */
+    public function ChecksStatus()
+    {
+        $xml = $this->provideXML();
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+        $this->assertTrue($paymentResponse->isSuccessful());
+    }
+
+	/** @test */
+	public function AmountIsConvertedToCent()
+    {
+        $xml = $this->provideXML();
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+        $this->assertEquals(100, $paymentResponse->getParam('amount'));
+    }
+
+	public function provideFloats()
+    {
+        return array(
+            array('17.89', 1789),
+            array('65.35', 6535),
+            array('12.99', 1299),
+        );
+    }
+
+	/**
+     * @test
+     * @dataProvider provideFloats
+     */
+	public function CorrectlyConvertsFloatAmountsToInteger($string, $integer)
+    {
+        $xml = $this->provideXML($string);
+
+        $paymentResponse = new DirectLinkPaymentResponse($xml);
+        $this->assertEquals($integer, $paymentResponse->getParam('amount'));
+    }
+
+	/**
+     * Helper method to setup an xml-string
+     */
+	private function provideXML($amount = null)
+    {
+
+        $xml = '<?xml version="1.0"?>
+                <ncresponse
+
+                ORDERID="123"
+                PAYID="0"
+                NCSTATUS="5"
+                NCERROR=""
+                ACCEPTANCE=""
+                STATUS="5"
+                AMOUNT="'.(($amount) ? $amount : '1').'"
+                CURRENCY="EUR"
+                PM=""
+                BRAND=""
+                NCERRORPLUS="">
+                </ncresponse>';
+
+        return $xml;
+    }
+
+    /**
+     * Helper method to setup an invalid xml-string
+     */
+    private function provideInvalidXML()
+    {
+        $xml = '<?xml version="1.0"?>
+                <ncresponse
+                </ncresponse>';
+
+        return $xml;
+    }
+}
diff --git a/tests/Ogone/Tests/Ecommerce/EcommercePaymentRequestTest.php b/tests/Ogone/Tests/Ecommerce/EcommercePaymentRequestTest.php
new file mode 100644
index 0000000..dd5c52e
--- /dev/null
+++ b/tests/Ogone/Tests/Ecommerce/EcommercePaymentRequestTest.php
@@ -0,0 +1,111 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\Ecommerce;
+
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+use PostFinance\Ecommerce\EcommercePaymentRequest;
+
+class EcommercePaymentRequestTest extends \TestCase
+{
+	/** @test */
+	public function IsValidWhenRequiredFieldsAreFilledIn()
+	{
+		$paymentRequest = $this->provideMinimalPaymentRequest();
+		$paymentRequest->validate();
+	}
+
+	/** @test */
+	public function IsValidWhenAllFieldsAreFilledIn()
+	{
+		$paymentRequest = $this->provideCompletePaymentRequest();
+		$paymentRequest->validate();
+	}
+
+	/**
+	 * @test
+	 * @expectedException \RuntimeException
+	 */
+	public function IsInvalidWhenFieldsAreMissing()
+	{
+		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
+		$paymentRequest->validate();
+	}
+
+	/** @test */
+	public function UnimportantParamsUseMagicSetters()
+	{
+		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
+		$paymentRequest->setBgcolor('FFFFFF');
+		$this->assertEquals('FFFFFF', $paymentRequest->getBgcolor());
+	}
+
+	/**
+	 * @test
+	 * @dataProvider provideBadParameters
+	 * @expectedException \InvalidArgumentException
+	 */
+	public function BadParametersCauseExceptions($method, $value)
+	{
+		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
+		$paymentRequest->$method($value);
+	}
+
+	/**
+	 * @test
+	 * @expectedException \BadMethodCallException
+	 */
+	public function UnknownMethodFails()
+	{
+		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
+		$paymentRequest->getFoobar();
+	}
+
+	public function provideBadParameters()
+	{
+		$longString = str_repeat('longstring', 100);
+		$notAUri = 'http://not a uri';
+		$longUri = "http://www.example.com/$longString";
+
+		return array(
+			array('setAccepturl', $notAUri),
+			array('setAmount', 10.50),
+			array('setAmount', -1),
+            array('setAmount', 1000000000000000),
+			array('setBrand', 'Oxfam'),
+			array('setCancelurl', $notAUri),
+            array('setCancelurl', $longUri),
+			array('setCurrency', 'Belgische Frank'),
+			//array('setCustomername', ''),
+			array('setDeclineurl', $notAUri),
+			array('setDynamicTemplateUri', $notAUri),
+			array('setEmail', 'foo @ bar'),
+			array('setEmail', "$longString@example.com"),
+			array('setExceptionurl', $notAUri),
+			//array('setFeedbackMessage', ''),
+			//array('setFeedbackParams', ''),
+			array('setLanguage', 'West-Vlaams'),
+			array('setPostFinanceUri', $notAUri),
+			array('setOrderDescription', $longString),
+			array('setOrderid', "Weird çh@®a©†€rs"),
+			array('setOrderid', $longString),
+			array('setOwnerAddress', $longString),
+			array('setOwnercountry', 'Benidorm'),
+			array('setOwnerPhone', $longString),
+			array('setOwnerTown', $longString),
+			array('setOwnerZip', $longString),
+			array('setParamvar', $longString),
+			array('setPaymentMethod', 'Digital'),
+			array('setPspid', $longString),
+		);
+	}
+
+}
diff --git a/tests/Ogone/Tests/Ecommerce/EcommercePaymentResponseTest.php b/tests/Ogone/Tests/Ecommerce/EcommercePaymentResponseTest.php
new file mode 100644
index 0000000..bef6466
--- /dev/null
+++ b/tests/Ogone/Tests/Ecommerce/EcommercePaymentResponseTest.php
@@ -0,0 +1,122 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\Ecommerce;
+
+use PostFinance\PaymentResponse;
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+use PostFinance\Ecommerce\EcommercePaymentResponse;
+use InvalidArgumentException;
+
+class EcommercePaymentResponseTest extends \TestCase
+{
+	/** @test */
+	public function CanBeVerified()
+	{
+		$aRequest = $this->provideRequest();
+
+		$paymentResponse = new EcommercePaymentResponse($aRequest);
+		$this->assertTrue($paymentResponse->isValid(new FakeShaComposer));
+	}
+
+	/**
+	 * @test
+	 * @expectedException InvalidArgumentException
+	*/
+	public function CannotExistWithoutShaSign()
+	{
+		$paymentResponse = new EcommercePaymentResponse(array());
+	}
+
+	/** @test */
+	public function ParametersCanBeRetrieved()
+	{
+		$aRequest = $this->provideRequest();
+
+		$paymentResponse = new EcommercePaymentResponse($aRequest);
+		$this->assertEquals($aRequest['orderID'], $paymentResponse->getParam('orderid'));
+	}
+
+	/**
+	 * @test
+	 * @expectedException InvalidArgumentException
+	 */
+	public function RequestIsFilteredFromNonPostFinanceParameters()
+	{
+		$aRequest = $this->provideRequest();
+
+		$paymentResponse = new EcommercePaymentResponse($aRequest);
+		$paymentResponse->getParam('unknown_param');
+	}
+
+	/** @test */
+	public function ChecksStatus()
+	{
+		$aRequest = $this->provideRequest();
+
+		$paymentResponse = new EcommercePaymentResponse($aRequest);
+		$this->assertTrue($paymentResponse->isSuccessful());
+	}
+
+	/** @test */
+	public function AmountIsConvertedToCent()
+	{
+		$aRequest = $this->provideRequest();
+
+		$paymentResponse = new EcommercePaymentResponse($aRequest);
+		$this->assertEquals(100, $paymentResponse->getParam('amount'));
+	}
+
+	public function provideFloats()
+	{
+		return array(
+			array('17.89', 1789),
+			array('65.35', 6535),
+			array('12.99', 1299),
+            array('1.0', 100)
+		);
+	}
+
+    /**
+     * @test
+     * @expectedException InvalidArgumentException
+     */
+    public function InvalidForInvalidCurrency()
+    {
+        $paymentResponse = new EcommercePaymentResponse(array('amount' => 'NaN', 'shasign' => '123'));
+        $paymentResponse->getParam('amount');
+    }
+
+	/**
+	 * @test
+	 * @dataProvider provideFloats
+	 */
+	public function CorrectlyConvertsFloatAmountsToInteger($string, $integer)
+	{
+		$paymentResponse = new EcommercePaymentResponse(array('amount' => $string, 'shasign' => '123'));
+		$this->assertEquals($integer, $paymentResponse->getParam('amount'));
+	}
+
+	/**
+	 * Helper method to setup a request array
+	 */
+	private function provideRequest()
+	{
+		return array(
+			'orderID' => '123',
+			'SHASIGN' => FakeShaComposer::FAKESHASTRING,
+			'UNKNOWN_PARAM' => false, /* unkown parameter, should be filtered out */
+			'status' => PaymentResponse::STATUS_AUTHORISED,
+			'amount' => 1,
+		);
+	}
+}
+
diff --git a/tests/Ogone/Tests/FormGenerator/SimpleFormGeneratorTest.php b/tests/Ogone/Tests/FormGenerator/SimpleFormGeneratorTest.php
new file mode 100644
index 0000000..7beded2
--- /dev/null
+++ b/tests/Ogone/Tests/FormGenerator/SimpleFormGeneratorTest.php
@@ -0,0 +1,48 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\FormGenerator;
+
+use PostFinance\FormGenerator\SimpleFormGenerator;
+use PostFinance\PaymentRequest;
+
+class SimpleFormGeneratorTest extends \TestCase
+{
+	/** @test */
+	public function GeneratesAForm()
+	{
+		$expected =
+			'<form method="post" action="https://secure.ogone.com/ncol/test/orderstandard_utf8.asp" id="ogone" name="ogone">
+				<input type="hidden" name="PSPID" value="123456789" />
+				<input type="hidden" name="ORDERID" value="987654321" />
+				<input type="hidden" name="CURRENCY" value="EUR" />
+				<input type="hidden" name="AMOUNT" value="100" />
+				<input type="hidden" name="CN" value="Louis XIV" />
+				<input type="hidden" name="OWNERADDRESS" value="1, Rue du Palais" />
+				<input type="hidden" name="OWNERTOWN" value="Versailles" />
+				<input type="hidden" name="OWNERZIP" value="2300" />
+				<input type="hidden" name="OWNERCTY" value="FR" />
+				<input type="hidden" name="EMAIL" value="louis.xiv@versailles.fr" />
+
+				<input type="hidden" name="'.PaymentRequest::SHASIGN_FIELD.'" value="foo" />
+				<input type="submit" value="Submit" id="ogonesubmit" name="ogonesubmit" />
+			</form>';
+
+		$paymentRequest = $this->provideMinimalPaymentRequest();
+		$formGenerator = new SimpleFormGenerator;
+        $formGenerator->showSubmitButton(true);
+        $formGenerator->setFormName('ogone');
+
+		$html = $formGenerator->render($paymentRequest);
+
+		$this->assertXmlStringEqualsXmlString($expected, $html);
+	}
+}
diff --git a/tests/Ogone/Tests/FormGenerator/UrlGeneratorTest.php b/tests/Ogone/Tests/FormGenerator/UrlGeneratorTest.php
new file mode 100644
index 0000000..085cfa5
--- /dev/null
+++ b/tests/Ogone/Tests/FormGenerator/UrlGeneratorTest.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace PostFinance\Tests\FormGenerator;
+
+use PostFinance\Ecommerce\EcommercePaymentRequest;
+use PostFinance\FormGenerator\UrlGenerator;
+use PostFinance\PaymentRequest;
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+
+class UrlGeneratorTest extends \TestCase {
+
+    /** @test */
+    public function GeneratesAnUrl() {
+        $expected = EcommercePaymentRequest::TEST . '?'.
+            'pspid=123456789' . '&'.
+            'orderid=987654321' . '&'.
+            'currency=EUR' . '&'.
+            'amount=100' . '&'.
+            'cn=Louis+XIV' . '&'.
+            'owneraddress=1%2C+Rue+du+Palais' . '&'.
+            'ownertown=Versailles' . '&'.
+            'ownerzip=2300' . '&'.
+            'ownercty=FR' . '&'.
+            'email=louis.xiv%40versailles.fr' . '&'.
+            PaymentRequest::SHASIGN_FIELD . '=' . FakeShaComposer::FAKESHASTRING;
+
+        $paymentRequest = $this->provideMinimalPaymentRequest();
+        $urlGenerator = new UrlGenerator();
+
+        $url = $urlGenerator->render($paymentRequest);
+
+        $this->assertEquals(strtolower($expected), strtolower($url));
+    }
+}
diff --git a/tests/Ogone/Tests/HashAlgorithmTest.php b/tests/Ogone/Tests/HashAlgorithmTest.php
new file mode 100644
index 0000000..7e527c0
--- /dev/null
+++ b/tests/Ogone/Tests/HashAlgorithmTest.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace PostFinance\Tests;
+
+use PostFinance\HashAlgorithm;
+
+class HashAlgorithmTest extends \TestCase
+{
+    /**
+     * @test
+     * @expectedException \InvalidArgumentException
+     */
+    public function UnknownHashAlgorithmIsInvalid()
+    {
+        new HashAlgorithm('md5');
+    }
+
+    /** @test */
+    public function CanBeRepresentedAsString()
+    {
+        $sha1 = new HashAlgorithm(HashAlgorithm::HASH_SHA1);
+        $this->assertEquals(HashAlgorithm::HASH_SHA1, (string) $sha1);
+    }
+}
diff --git a/tests/Ogone/Tests/OgoneTest.php b/tests/Ogone/Tests/OgoneTest.php
new file mode 100644
index 0000000..67a5a37
--- /dev/null
+++ b/tests/Ogone/Tests/OgoneTest.php
@@ -0,0 +1,166 @@
+<?php
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests;
+
+use Guzzle\Http\Client;
+use PostFinance\DirectLink\Eci;
+use PostFinance\Passphrase;
+use PostFinance\DirectLink\Alias;
+use PostFinance\DirectLink\CreateAliasRequest;
+use PostFinance\DirectLink\CreateAliasResponse;
+use PostFinance\ShaComposer\AllParametersShaComposer;
+use PostFinance\ParameterFilter\ShaOutParameterFilter;
+use PostFinance\DirectLink\DirectLinkPaymentRequest;
+use PostFinance\DirectLink\DirectLinkPaymentResponse;
+
+/**
+ * @group integration
+ */
+class PostFinanceTest extends \TestCase {
+
+    /**
+     * @test
+     */
+    public function AliasCreationIsSuccessful()
+    {
+        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
+        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
+        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
+
+        $createAliasResponse = $this->provideAliasResponse();
+
+        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
+        $this->assertTrue($createAliasResponse->isSuccessful());
+
+        return (string) $createAliasResponse->getAlias();
+    }
+
+    /**
+     * @test
+     * @depends AliasCreationIsSuccessful
+     */
+    public function DirectLinkPaymentIsSuccessful($alias)
+    {
+        $passphrase = new Passphrase(PASSPHRASE_SHA_IN);
+        $shaComposer = new AllParametersShaComposer($passphrase);
+        $directLinkRequest = new DirectLinkPaymentRequest($shaComposer);
+
+        $orderId = uniqid('order_'); // create a unique order id
+        $directLinkRequest->setOrderid($orderId);
+
+        $alias = new Alias($alias);
+        $directLinkRequest->setPspid(PSPID);
+        $directLinkRequest->setUserId(USERID);
+        $directLinkRequest->setPassword(PASSWORD);
+        $directLinkRequest->setAlias($alias);
+        $directLinkRequest->setAmount(100);
+        $directLinkRequest->setCurrency('EUR');
+        $directLinkRequest->setEci(new Eci(Eci::ECOMMERCE_RECURRING));
+        $directLinkRequest->validate();
+
+        $body = array();
+        foreach($directLinkRequest->toArray() as $key => $value) {
+            $body[strtoupper($key)] = $value;
+        }
+
+        $body['SHASIGN'] = $directLinkRequest->getShaSign();
+
+        $client = new Client($directLinkRequest->getPostFinanceUri());
+        $request = $client->post(null, null, $body);
+        $response = $request->send();
+
+        $directLinkResponse = new DirectLinkPaymentResponse($response->getBody(true));
+
+        $this->assertTrue($directLinkResponse->isSuccessful());
+
+        return $alias;
+    }
+
+    /**
+     * @test
+     */
+    public function AliasIsCreatedByPostFinance()
+    {
+        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
+        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
+        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
+
+        $createAliasResponse = $this->provideAliasResponse(false);
+
+        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
+        $this->assertTrue($createAliasResponse->isSuccessful());
+    }
+
+    /**
+     * @test
+     */
+    public function CreateAliasInvalid()
+    {
+        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
+        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
+        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
+
+        $createAliasResponse = $this->provideAliasResponse(true, true);
+
+        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
+        $this->assertFalse($createAliasResponse->isSuccessful());
+    }
+
+
+    public function provideAliasResponse($createAlias = true, $noValidCardnumber = false)
+    {
+        /*
+         *  Create an alias request to PostFinance
+         */
+        $passphrase = new Passphrase(PASSPHRASE_SHA_IN);
+        $shaComposer = new AllParametersShaComposer($passphrase);
+
+        $createAliasRequest = new CreateAliasRequest($shaComposer);
+        $createAliasRequest->setPspid(PSPID);
+        $createAliasRequest->setAccepturl('http://www.example.com');
+        $createAliasRequest->setExceptionurl('http://www.example.com');
+
+        if($createAlias == true) {
+            $unique_alias = uniqid('customer_'); // create a unique alias
+            $alias = new Alias($unique_alias);
+            $createAliasRequest->setAlias($alias);
+        }
+
+        $createAliasRequest->validate();
+
+        $body = array();
+        foreach($createAliasRequest->toArray() as $key => $value) {
+            $body[strtoupper($key)] = $value;
+        }
+
+        $body['SHASIGN'] = $createAliasRequest->getShaSign();
+        $body['CN'] = 'Don Corleone';
+        $body['CARDNO'] = ($noValidCardnumber) ? '' : '4111111111111111'; // PostFinance Visa test cardnumber
+        $body['CVC'] = '777';
+        $body['ED'] = date('my', strtotime('+1 year')); // test-date should be in the future
+
+        $client = new Client($createAliasRequest->getPostFinanceUri());
+        $request = $client->post(null, null, $body);
+        $response = $request->send();
+
+        $url = parse_url($response->getInfo('url'));
+        $params = array();
+        parse_str($url['query'], $params);
+
+        /*
+         * Validate alias response from PostFinance
+         */
+
+        $createAliasResponse = new CreateAliasResponse($params);
+
+        return $createAliasResponse;
+    }
+}
diff --git a/tests/Ogone/Tests/ParameterFilter/ShaInParameterFilterTest.php b/tests/Ogone/Tests/ParameterFilter/ShaInParameterFilterTest.php
new file mode 100644
index 0000000..3a3287a
--- /dev/null
+++ b/tests/Ogone/Tests/ParameterFilter/ShaInParameterFilterTest.php
@@ -0,0 +1,25 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\ShaComposer;
+
+use PostFinance\ParameterFilter\ShaInParameterFilter;
+
+class ShaInParameterFilterTest extends \TestCase
+{
+	/** @test */
+	public function RemovesUnwantedParameters()
+	{
+		$filter = new ShaInParameterFilter;
+		$result = $filter->filter(array('foo' => 'bar', 'orderId' => 123));
+		$this->assertEquals(array('ORDERID' => 123), $result);
+	}
+}
\ No newline at end of file
diff --git a/tests/Ogone/Tests/ShaComposer/AllParametersShaComposerTest.php b/tests/Ogone/Tests/ShaComposer/AllParametersShaComposerTest.php
new file mode 100644
index 0000000..36333ea
--- /dev/null
+++ b/tests/Ogone/Tests/ShaComposer/AllParametersShaComposerTest.php
@@ -0,0 +1,144 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\ShaComposer;
+
+use PostFinance\HashAlgorithm;
+use PostFinance\ParameterFilter\ShaOutParameterFilter;
+use PostFinance\Passphrase;
+use PostFinance\PaymentResponse;
+use PostFinance\ShaComposer\AllParametersShaComposer;
+
+class AllParametersShaComposerTest extends \TestCase
+{
+	/**
+	 * @test
+	 * @dataProvider provideSha1Request
+	 */
+	public function Sha1StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
+	{
+		$composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA1));
+		$composer->addParameterFilter(new ShaOutParameterFilter);
+		$this->assertEquals($expectedSha, $composer->compose($request));
+	}
+
+    /**
+     * @test
+     * @dataProvider provideSha256Request
+     */
+    public function Sha256StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
+    {
+        $composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA256));
+        $composer->addParameterFilter(new ShaOutParameterFilter);
+        $this->assertEquals($expectedSha, $composer->compose($request));
+    }
+
+    /**
+     * @test
+     * @dataProvider provideSha512Request
+     */
+    public function Sha512StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
+    {
+        $composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA512));
+        $composer->addParameterFilter(new ShaOutParameterFilter);
+        $this->assertEquals($expectedSha, $composer->compose($request));
+    }
+
+	public function provideSha1Request()
+	{
+		$passphrase = new PassPhrase('Mysecretsig1875!?');
+
+		$expectedSha1 = 'B209960D5703DD1047F95A0F97655FFE5AC8BD52';
+		$request1 = $this->createMinimalParameterSet();
+
+		$expectedSha2 = 'D58400479DCEDD6B6C7E67D61FDC0CC9E6ED65CB';
+		$request2 = $this->createExtensiveParameterSet();
+
+
+
+		return array(
+			array($passphrase, $request1, $expectedSha1),
+			array($passphrase, $request2, $expectedSha2),
+		);
+	}
+
+    public function provideSha256Request()
+    {
+        $passphrase = new PassPhrase('Mysecretsig1875!?');
+
+        $expectedSha1 = 'FD15F9371F2B42E3CAEC53BF2576AC89AAEBF53FD8FBA8F0B2EA13EAA823189D';
+        $request1 = $this->createMinimalParameterSet();
+
+        $expectedSha2 = 'A06D4534724885350BA5350731B02F4083370F8C9EED59D1F1C5E2B78EC3C257';
+        $request2 = $this->createExtensiveParameterSet();
+
+        return array(
+            array($passphrase, $request1, $expectedSha1),
+            array($passphrase, $request2, $expectedSha2),
+        );
+    }
+
+    public function provideSha512Request()
+    {
+        $passphrase = new PassPhrase('Mysecretsig1875!?');
+
+        $expectedSha1 = '5377F95D498947BECC23E02C2C7DDE182EE1221F1A6629B091110DF653FE0C32FCACF5F9B87B4C5168FC12B7183095623750004355DE938A2B8DECC6DB6D9F62';
+        $request1 = $this->createMinimalParameterSet();
+
+        $expectedSha2 = '31B74E4E0C7BCE4DED9DEAA97D4D3FB419EF6E2FDBD98C18D340B276A9F751E747972A0469A74B73E4C41F38F0F3F58BAD8D7107CA54DF936569852887EB6BE4';
+        $request2 = $this->createExtensiveParameterSet();
+
+        return array(
+            array($passphrase, $request1, $expectedSha1),
+            array($passphrase, $request2, $expectedSha2),
+        );
+    }
+
+    protected function createMinimalParameterSet()
+    {
+        return array(
+            'currency' => 'EUR',
+            'ACCEPTANCE' => 1234,
+            'amount' => 15,
+            'BRAND' => 'VISA',
+            'CARDNO' => 'xxxxxxxxxxxx1111',
+            'NCERROR' => 0,
+            'PAYID' => 32100123,
+            'PM' => 'CreditCard',
+            'STATUS' => 9,
+            'orderID' => 12,
+            'unknownparam' => 'some value',
+        );
+    }
+
+    protected function createExtensiveParameterSet()
+    {
+        return array (
+            'orderID' => 'myorderid1678834094',
+            'currency' => 'EUR',
+            'amount' => '99',
+            'PM' => 'CreditCard',
+            'ACCEPTANCE' => 'test123',
+            'STATUS' => '9',
+            'CARDNO' => 'XXXXXXXXXXXX1111',
+            'ED' => '0312',
+            'CN' => 'Some Name',
+            'TRXDATE' => '01/10/11',
+            'PAYID' => '9126297',
+            'NCERROR' => '0',
+            'BRAND' => 'VISA',
+            'COMPLUS' => 'my feedbackmessage',
+            'IP' => '12.123.12.123',
+            'foo' => 'bar',
+        );
+    }
+
+}
diff --git a/tests/Ogone/Tests/ShaComposer/FakeShaComposer.php b/tests/Ogone/Tests/ShaComposer/FakeShaComposer.php
new file mode 100644
index 0000000..1dd98ac
--- /dev/null
+++ b/tests/Ogone/Tests/ShaComposer/FakeShaComposer.php
@@ -0,0 +1,27 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\ShaComposer;
+
+use PostFinance\ShaComposer\ShaComposer;
+
+/**
+ * Fake SHA Composer to decouple test from actual SHA composers
+ */
+class FakeShaComposer implements ShaComposer
+{
+	const FAKESHASTRING = 'foo';
+
+	public function compose(array $responseParameters)
+	{
+		return self::FAKESHASTRING;
+	}
+}
\ No newline at end of file
diff --git a/tests/Ogone/Tests/ShaComposer/LegacyShaComposerTest.php b/tests/Ogone/Tests/ShaComposer/LegacyShaComposerTest.php
new file mode 100644
index 0000000..8713996
--- /dev/null
+++ b/tests/Ogone/Tests/ShaComposer/LegacyShaComposerTest.php
@@ -0,0 +1,78 @@
+<?php
+
+/*
+ * This file is part of the Marlon PostFinance package.
+ *
+ * (c) Marlon BVBA <info@marlon.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PostFinance\Tests\ShaComposer;
+
+use PostFinance\HashAlgorithm;
+use PostFinance\Passphrase;
+use PostFinance\PaymentResponse;
+use PostFinance\ShaComposer\LegacyShaComposer;
+
+class LegacyShaComposerTest extends \TestCase
+{
+	const PASSPHRASE = 'passphrase-set-in-ogone-interface';
+	const SHA1STRING = '66BF34D8B3EF2136E0C267BDBC1F708B8D75A8AA';
+	const SHA256STRING = '882D85FCCC6112A33D3B8A571C11723CAA6B642EED70843B35B15ABA0C2AD637';
+	const SHA512STRING = '8552200DD108CB5633A27D6D0A1FAB54378CB2385BFCEB27487992D16F5A7565E5DD4D38C0F2DB294213CD02E434F311021749E6DAB187357F786E3F199781CA';
+
+	/** @test */
+	public function Sha1StringCanBeComposed()
+	{
+		$aRequest = $this->provideRequest();
+
+		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA1));
+		$shaString = $composer->compose($aRequest);
+
+		$this->assertEquals(self::SHA1STRING, $shaString);
+	}
+
+	/** @test */
+	public function Sha256StringCanBeComposed()
+	{
+		$aRequest = $this->provideRequest();
+
+		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA256));
+		$shaString = $composer->compose($aRequest);
+
+		$this->assertEquals(self::SHA256STRING, $shaString);
+	}
+
+	/** @test */
+	public function Sha512StringCanBeComposed()
+	{
+		$aRequest = $this->provideRequest();
+
+		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA512));
+		$shaString = $composer->compose($aRequest);
+
+		$this->assertEquals(self::SHA512STRING, $shaString);
+	}
+
+	private function provideRequest()
+	{
+		return array(
+			'ACCEPTANCE' => 'test123',
+			'AMOUNT' => '19.08',
+			'BRAND' => 'VISA',
+			'CARDNO' => 'XXXXXXXXXXXX1111',
+			'CN' => 'Marlon',
+			'CURRENCY' => 'EUR',
+			'ED' => '0113',
+			'IP' => '81.82.214.142',
+			'NCERROR' => 0,
+			'ORDERID' => 2101947639,
+			'PAYID' => 10673859,
+			'PM' => 'CreditCard',
+			'STATUS' => PaymentResponse::STATUS_AUTHORISED,
+			'TRXDATE' => '07/05/11'
+		);
+	}
+}
\ No newline at end of file
diff --git a/tests/Ogone/Tests/Subscription/SubscriptionPaymentRequestTest.php b/tests/Ogone/Tests/Subscription/SubscriptionPaymentRequestTest.php
new file mode 100644
index 0000000..66ab878
--- /dev/null
+++ b/tests/Ogone/Tests/Subscription/SubscriptionPaymentRequestTest.php
@@ -0,0 +1,90 @@
+<?php
+
+namespace PostFinance\Tests\Subscription;
+
+use PostFinance\Subscription\SubscriptionPaymentRequest;
+use PostFinance\Subscription\SubscriptionPeriod;
+use PostFinance\Tests\ShaComposer\FakeShaComposer;
+
+class SubscriptionPaymentRequestTest extends \TestCase {
+
+    /** @test */
+    public function AmountCanBeZero() {
+        $paymentRequest = $this->createSubscriptionRequest();
+        $paymentRequest->setAmount(0);
+        $this->assertEquals(0, $paymentRequest->getAmount());
+    }
+
+    /**
+     * @test
+     * @dataProvider provideBadParameters
+     * @expectedException \InvalidArgumentException
+     */
+    public function BadParametersCauseExceptions($method, $value) {
+        $paymentRequest = $this->createSubscriptionRequest();
+        $paymentRequest->$method($value);
+    }
+
+    /**
+     * @test
+     * @expectedException \RuntimeException
+     */
+    public function IsInvalidIfSubscriptionParametersAreMissing() {
+        $paymentRequest = $this->createSubscriptionRequest();
+        $paymentRequest->setPspid('12');
+        $paymentRequest->setCurrency('EUR');
+        $paymentRequest->setAmount(0);
+        $paymentRequest->setOrderId('10');
+        $paymentRequest->validate();
+    }
+
+    /** @test */
+    public function RequestCanBeValid() {
+        $paymentRequest = $this->createSubscriptionRequest();
+        $paymentRequest->setPspid('12');
+        $paymentRequest->setCurrency('EUR');
+        $paymentRequest->setAmount(0);
+        $paymentRequest->setOrderId('10');
+        $paymentRequest->setSubscriptionId('12');
+        $paymentRequest->setSubscriptionAmount(13);
+        $paymentRequest->setSubscriptionComment('test');
+        $paymentRequest->setSubscriptionDescription('description');
+        $paymentRequest->setSubscriptionOrderId('13');
+        $paymentRequest->setSubscriptionPeriod($this->createSubscriptionPeriod());
+        $paymentRequest->setSubscriptionStartdate(new \DateTime());
+        $paymentRequest->setSubscriptionEnddate(new \DateTime());
+        $paymentRequest->setSubscriptionStatus(1);
+        $paymentRequest->validate();
+        $this->assertTrue(true);
+    }
+
+    public function provideBadParameters() {
+
+        return array(
+            array('setAmount', 10.50),
+            array('setAmount', -1),
+            array('setAmount', 150000000000000000),
+            array('setSubscriptionId', 'this is a little more than 50 characters, which is truly the max amount'),
+            array('setSubscriptionId', '$e©ial Ch@r@cters'),
+            array('setSubscriptionAmount', 10.50),
+            array('setSubscriptionAmount', 0),
+            array('setSubscriptionAmount', -1),
+            array('setSubscriptionAmount', 150000000000000000),
+            array('setSubscriptionDescription', 'this is a little more than 100 characters- which is truly the maximum amount of characters one can pass as a parameter to this particular function'),
+            array('setSubscriptionDescription', 'special, characters!'),
+            array('setSubscriptionOrderId', 'this is a little more than 40 characters- which is truly the max amount'),
+            array('setSubscriptionOrderId', 'special, characters!'),
+            array('setSubscriptionStatus', 5),
+            array('setSubscriptionComment', 'this particular string is supposed to be longer than 200 characters- which will require me to type for quite a while longer than the string that needed to exceed 50 chars- which is- in fact- significantly lower than 200'),
+            array('setSubscriptionComment', 'special, characters!')
+        );
+    }
+
+    protected function createSubscriptionRequest() {
+        return new SubscriptionPaymentRequest(new FakeShaComposer());
+    }
+
+    protected function createSubscriptionPeriod() {
+        return new SubscriptionPeriod(SubscriptionPeriod::UNIT_DAILY, 12, 7);
+    }
+}
diff --git a/tests/Ogone/Tests/Subscription/SubscriptionPeriodTest.php b/tests/Ogone/Tests/Subscription/SubscriptionPeriodTest.php
new file mode 100644
index 0000000..b041fae
--- /dev/null
+++ b/tests/Ogone/Tests/Subscription/SubscriptionPeriodTest.php
@@ -0,0 +1,128 @@
+<?php
+
+namespace PostFinance\Tests\Subscription;
+
+use PostFinance\Subscription\SubscriptionPeriod;
+
+class SubscriptionPeriodTest extends \TestCase {
+
+    /** @test */
+    public function UnitMustBeValid() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod('not an actual unit');
+    }
+
+    /** @test */
+    public function SettingUnitToWeeklyChecksMoment() {
+        $period = $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, 8);
+        $this->setExpectedException('InvalidArgumentException');
+        $period->setUnit(SubscriptionPeriod::UNIT_WEEKLY);
+    }
+
+    /** @test */
+    public function SettingUnitToMonthlyChecksMoment() {
+        $period = $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, 29);
+        $this->setExpectedException('InvalidArgumentException');
+        $period->setUnit(SubscriptionPeriod::UNIT_MONTHLY);
+    }
+
+    /**
+     * @test
+     * @dataProvider unitProvider
+     */
+    public function UnitCanBeSetRight($unit) {
+        $period = $this->createPeriod($unit);
+        $this->assertEquals($unit, $period->getUnit());
+    }
+
+    /** @test */
+    public function IntervalMustBeInteger() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 'not an int');
+    }
+
+    /** @test */
+    public function IntervalMustBePositive() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, -12);
+    }
+
+    /** @test */
+    public function IntervalMustNotBeTooBig() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 150000000000000000);
+    }
+
+    /**
+     * @test
+     * @dataProvider intProvider
+     */
+    public function IntervalCanBeSetRight($interval) {
+        $period = $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, $interval);
+        $this->assertEquals($interval, $period->getInterval());
+    }
+
+    /** @test */
+    public function MomentMustBeInt() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, 'not an int');
+    }
+
+    /** @test */
+    public function MomentMustBePositive() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, -12);
+    }
+
+    /** @test */
+    public function MomentMustNotBeTooBig() {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, 150000000000000000);
+    }
+
+    /**
+     * @test
+     * @dataProvider badUnitMomentComboProvider
+     */
+    public function MomentChecksUnit($unit, $interval) {
+        $this->setExpectedException('InvalidArgumentException');
+        $this->createPeriod($unit, 12, $interval);
+    }
+
+    /**
+     * @test
+     * @dataProvider intProvider
+     */
+    public function MomentCanBeSetRight($moment) {
+        $period = $this->createPeriod(SubscriptionPeriod::UNIT_DAILY, 12, $moment);
+        $this->assertEquals($moment, $period->getMoment());
+    }
+
+    public function unitProvider() {
+        return array(
+            array(SubscriptionPeriod::UNIT_DAILY),
+            array(SubscriptionPeriod::UNIT_WEEKLY),
+            array(SubscriptionPeriod::UNIT_MONTHLY)
+        );
+    }
+
+    public function intProvider() {
+        return array(
+            array(1),
+            array(5),
+            array(32),
+            array(123546)
+        );
+    }
+
+    public function badUnitMomentComboProvider() {
+        return array(
+            array(SubscriptionPeriod::UNIT_WEEKLY, 8),
+            array(SubscriptionPeriod::UNIT_MONTHLY, 29)
+        );
+    }
+
+    protected function createPeriod($unit = SubscriptionPeriod::UNIT_DAILY, $interval = 12, $moment = 6) {
+        return new SubscriptionPeriod($unit, $interval, $moment);
+    }
+}
diff --git a/tests/PostFinance/Tests/Ecommerce/EcommercePaymentRequestTest.php b/tests/PostFinance/Tests/Ecommerce/EcommercePaymentRequestTest.php
deleted file mode 100644
index 6933fd4..0000000
--- a/tests/PostFinance/Tests/Ecommerce/EcommercePaymentRequestTest.php
+++ /dev/null
@@ -1,112 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\Ecommerce;
-
-use PostFinance\Tests\ShaComposer\FakeShaComposer;
-use PostFinance\Ecommerce\EcommercePaymentRequest;
-
-class EcommercePaymentRequestTest extends \TestCase
-{
-	/** @test */
-	public function IsValidWhenRequiredFieldsAreFilledIn()
-	{
-		$paymentRequest = $this->provideMinimalPaymentRequest();
-		$paymentRequest->validate();
-	}
-
-	/** @test */
-	public function IsValidWhenAllFieldsAreFilledIn()
-	{
-		$paymentRequest = $this->provideCompletePaymentRequest();
-		$paymentRequest->validate();
-	}
-
-	/**
-	 * @test
-	 * @expectedException \RuntimeException
-	 */
-	public function IsInvalidWhenFieldsAreMissing()
-	{
-		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
-		$paymentRequest->validate();
-	}
-
-	/** @test */
-	public function UnimportantParamsUseMagicSetters()
-	{
-		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
-		$paymentRequest->setBgcolor('FFFFFF');
-		$this->assertEquals('FFFFFF', $paymentRequest->getBgcolor());
-	}
-
-	/**
-	 * @test
-	 * @dataProvider provideBadParameters
-	 * @expectedException \InvalidArgumentException
-	 */
-	public function BadParametersCauseExceptions($method, $value)
-	{
-		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
-		$paymentRequest->$method($value);
-	}
-
-	/**
-	 * @test
-	 * @expectedException \BadMethodCallException
-	 */
-	public function UnknownMethodFails()
-	{
-		$paymentRequest = new EcommercePaymentRequest(new FakeShaComposer);
-		$paymentRequest->getFoobar();
-	}
-
-	public function provideBadParameters()
-	{
-		$longString = str_repeat('longstring', 100);
-		$notAUri = 'http://not a uri';
-		$longUri = "http://www.example.com/$longString";
-
-		return array(
-			array('setAccepturl', $notAUri),
-			array('setAmount', 10.50),
-			array('setAmount', -1),
-            array('setAmount', 1000000000000000),
-			array('setBrand', 'Oxfam'),
-			array('setCancelurl', $notAUri),
-            array('setCancelurl', $longUri),
-			array('setCurrency', 'Belgische Frank'),
-			//array('setCustomername', ''),
-			array('setDeclineurl', $notAUri),
-			array('setDynamicTemplateUri', $notAUri),
-			array('setEmail', 'foo @ bar'),
-			array('setEmail', "$longString@example.com"),
-			array('setExceptionurl', $notAUri),
-			//array('setFeedbackMessage', ''),
-			//array('setFeedbackParams', ''),
-			array('setLanguage', 'West-Vlaams'),
-			array('setPostFinanceUri', $notAUri),
-			array('setOrderDescription', $longString),
-			array('setOrderid', "Weird çh@®a©†€rs"),
-			array('setOrderid', $longString),
-			array('setOwnerAddress', $longString),
-			array('setOwnercountry', 'Benidorm'),
-			array('setOwnerPhone', $longString),
-			array('setOwnerTown', $longString),
-			array('setOwnerZip', $longString),
-			array('setParamvar', $longString),
-			array('setPaymentMethod', 'Digital'),
-			array('setPspid', $longString),
-		);
-	}
-
-}
diff --git a/tests/PostFinance/Tests/Ecommerce/EcommercePaymentResponseTest.php b/tests/PostFinance/Tests/Ecommerce/EcommercePaymentResponseTest.php
deleted file mode 100644
index c5fbf5f..0000000
--- a/tests/PostFinance/Tests/Ecommerce/EcommercePaymentResponseTest.php
+++ /dev/null
@@ -1,123 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\Ecommerce;
-
-use PostFinance\PaymentResponse;
-use PostFinance\Tests\ShaComposer\FakeShaComposer;
-use PostFinance\Ecommerce\EcommercePaymentResponse;
-use InvalidArgumentException;
-
-class EcommercePaymentResponseTest extends \TestCase
-{
-	/** @test */
-	public function CanBeVerified()
-	{
-		$aRequest = $this->provideRequest();
-
-		$paymentResponse = new EcommercePaymentResponse($aRequest);
-		$this->assertTrue($paymentResponse->isValid(new FakeShaComposer));
-	}
-
-	/**
-	 * @test
-	 * @expectedException InvalidArgumentException
-	*/
-	public function CannotExistWithoutShaSign()
-	{
-		$paymentResponse = new EcommercePaymentResponse(array());
-	}
-
-	/** @test */
-	public function ParametersCanBeRetrieved()
-	{
-		$aRequest = $this->provideRequest();
-
-		$paymentResponse = new EcommercePaymentResponse($aRequest);
-		$this->assertEquals($aRequest['orderID'], $paymentResponse->getParam('orderid'));
-	}
-
-	/**
-	 * @test
-	 * @expectedException InvalidArgumentException
-	 */
-	public function RequestIsFilteredFromNonPostFinanceParameters()
-	{
-		$aRequest = $this->provideRequest();
-
-		$paymentResponse = new EcommercePaymentResponse($aRequest);
-		$paymentResponse->getParam('unknown_param');
-	}
-
-	/** @test */
-	public function ChecksStatus()
-	{
-		$aRequest = $this->provideRequest();
-
-		$paymentResponse = new EcommercePaymentResponse($aRequest);
-		$this->assertTrue($paymentResponse->isSuccessful());
-	}
-
-	/** @test */
-	public function AmountIsConvertedToCent()
-	{
-		$aRequest = $this->provideRequest();
-
-		$paymentResponse = new EcommercePaymentResponse($aRequest);
-		$this->assertEquals(100, $paymentResponse->getParam('amount'));
-	}
-
-	public function provideFloats()
-	{
-		return array(
-			array('17.89', 1789),
-			array('65.35', 6535),
-			array('12.99', 1299),
-            array('1.0', 100)
-		);
-	}
-
-    /**
-     * @test
-     * @expectedException InvalidArgumentException
-     */
-    public function InvalidForInvalidCurrency()
-    {
-        $paymentResponse = new EcommercePaymentResponse(array('amount' => 'NaN', 'shasign' => '123'));
-        $paymentResponse->getParam('amount');
-    }
-
-	/**
-	 * @test
-	 * @dataProvider provideFloats
-	 */
-	public function CorrectlyConvertsFloatAmountsToInteger($string, $integer)
-	{
-		$paymentResponse = new EcommercePaymentResponse(array('amount' => $string, 'shasign' => '123'));
-		$this->assertEquals($integer, $paymentResponse->getParam('amount'));
-	}
-
-	/**
-	 * Helper method to setup a request array
-	 */
-	private function provideRequest()
-	{
-		return array(
-			'orderID' => '123',
-			'SHASIGN' => FakeShaComposer::FAKESHASTRING,
-			'UNKNOWN_PARAM' => false, /* unkown parameter, should be filtered out */
-			'status' => PaymentResponse::STATUS_AUTHORISED,
-			'amount' => 1,
-		);
-	}
-}
-
diff --git a/tests/PostFinance/Tests/FormGenerator/SimpleFormGeneratorTest.php b/tests/PostFinance/Tests/FormGenerator/SimpleFormGeneratorTest.php
deleted file mode 100644
index 750ad10..0000000
--- a/tests/PostFinance/Tests/FormGenerator/SimpleFormGeneratorTest.php
+++ /dev/null
@@ -1,49 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\FormGenerator;
-
-use PostFinance\FormGenerator\SimpleFormGenerator;
-use PostFinance\PaymentRequest;
-
-class SimpleFormGeneratorTest extends \TestCase
-{
-	/** @test */
-	public function GeneratesAForm()
-	{
-		$expected =
-			'<form method="post" action="https://e-payment.postfinance.ch/ncol/test/orderstandard.asp" id="ogone" name="ogone">
-				<input type="hidden" name="PSPID" value="123456789" />
-				<input type="hidden" name="ORDERID" value="987654321" />
-				<input type="hidden" name="CURRENCY" value="EUR" />
-				<input type="hidden" name="AMOUNT" value="100" />
-				<input type="hidden" name="CN" value="Louis XIV" />
-				<input type="hidden" name="OWNERADDRESS" value="1, Rue du Palais" />
-				<input type="hidden" name="OWNERTOWN" value="Versailles" />
-				<input type="hidden" name="OWNERZIP" value="2300" />
-				<input type="hidden" name="OWNERCTY" value="FR" />
-				<input type="hidden" name="EMAIL" value="louis.xiv@versailles.fr" />
-
-				<input type="hidden" name="'.PaymentRequest::SHASIGN_FIELD.'" value="foo" />
-				<input name="PostFinancesubmit" type="submit" value="Submit" id="PostFinancesubmit"/>
-			</form>';
-
-		$paymentRequest = $this->provideMinimalPaymentRequest();
-		$formGenerator = new SimpleFormGenerator;
-        $formGenerator->showSubmitButton(true);
-        $formGenerator->setFormName('ogone');
-
-		$html = $formGenerator->render($paymentRequest);
-
-		$this->assertXmlStringEqualsXmlString($expected, $html);
-	}
-}
diff --git a/tests/PostFinance/Tests/FormGenerator/UrlGeneratorTest.php b/tests/PostFinance/Tests/FormGenerator/UrlGeneratorTest.php
deleted file mode 100644
index 085cfa5..0000000
--- a/tests/PostFinance/Tests/FormGenerator/UrlGeneratorTest.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-namespace PostFinance\Tests\FormGenerator;
-
-use PostFinance\Ecommerce\EcommercePaymentRequest;
-use PostFinance\FormGenerator\UrlGenerator;
-use PostFinance\PaymentRequest;
-use PostFinance\Tests\ShaComposer\FakeShaComposer;
-
-class UrlGeneratorTest extends \TestCase {
-
-    /** @test */
-    public function GeneratesAnUrl() {
-        $expected = EcommercePaymentRequest::TEST . '?'.
-            'pspid=123456789' . '&'.
-            'orderid=987654321' . '&'.
-            'currency=EUR' . '&'.
-            'amount=100' . '&'.
-            'cn=Louis+XIV' . '&'.
-            'owneraddress=1%2C+Rue+du+Palais' . '&'.
-            'ownertown=Versailles' . '&'.
-            'ownerzip=2300' . '&'.
-            'ownercty=FR' . '&'.
-            'email=louis.xiv%40versailles.fr' . '&'.
-            PaymentRequest::SHASIGN_FIELD . '=' . FakeShaComposer::FAKESHASTRING;
-
-        $paymentRequest = $this->provideMinimalPaymentRequest();
-        $urlGenerator = new UrlGenerator();
-
-        $url = $urlGenerator->render($paymentRequest);
-
-        $this->assertEquals(strtolower($expected), strtolower($url));
-    }
-}
diff --git a/tests/PostFinance/Tests/HashAlgorithmTest.php b/tests/PostFinance/Tests/HashAlgorithmTest.php
deleted file mode 100644
index 7e527c0..0000000
--- a/tests/PostFinance/Tests/HashAlgorithmTest.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-namespace PostFinance\Tests;
-
-use PostFinance\HashAlgorithm;
-
-class HashAlgorithmTest extends \TestCase
-{
-    /**
-     * @test
-     * @expectedException \InvalidArgumentException
-     */
-    public function UnknownHashAlgorithmIsInvalid()
-    {
-        new HashAlgorithm('md5');
-    }
-
-    /** @test */
-    public function CanBeRepresentedAsString()
-    {
-        $sha1 = new HashAlgorithm(HashAlgorithm::HASH_SHA1);
-        $this->assertEquals(HashAlgorithm::HASH_SHA1, (string) $sha1);
-    }
-}
diff --git a/tests/PostFinance/Tests/OgoneTest.php b/tests/PostFinance/Tests/OgoneTest.php
deleted file mode 100644
index d6eb881..0000000
--- a/tests/PostFinance/Tests/OgoneTest.php
+++ /dev/null
@@ -1,167 +0,0 @@
-<?php
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests;
-
-use Guzzle\Http\Client;
-use PostFinance\DirectLink\Eci;
-use PostFinance\Passphrase;
-use PostFinance\DirectLink\Alias;
-use PostFinance\DirectLink\CreateAliasRequest;
-use PostFinance\DirectLink\CreateAliasResponse;
-use PostFinance\ShaComposer\AllParametersShaComposer;
-use PostFinance\ParameterFilter\ShaOutParameterFilter;
-use PostFinance\DirectLink\DirectLinkPaymentRequest;
-use PostFinance\DirectLink\DirectLinkPaymentResponse;
-
-/**
- * @group integration
- */
-class PostFinanceTest extends \TestCase {
-
-    /**
-     * @test
-     */
-    public function AliasCreationIsSuccessful()
-    {
-        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
-        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
-        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
-
-        $createAliasResponse = $this->provideAliasResponse();
-
-        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
-        $this->assertTrue($createAliasResponse->isSuccessful());
-
-        return (string) $createAliasResponse->getAlias();
-    }
-
-    /**
-     * @test
-     * @depends AliasCreationIsSuccessful
-     */
-    public function DirectLinkPaymentIsSuccessful($alias)
-    {
-        $passphrase = new Passphrase(PASSPHRASE_SHA_IN);
-        $shaComposer = new AllParametersShaComposer($passphrase);
-        $directLinkRequest = new DirectLinkPaymentRequest($shaComposer);
-
-        $orderId = uniqid('order_'); // create a unique order id
-        $directLinkRequest->setOrderid($orderId);
-
-        $alias = new Alias($alias);
-        $directLinkRequest->setPspid(PSPID);
-        $directLinkRequest->setUserId(USERID);
-        $directLinkRequest->setPassword(PASSWORD);
-        $directLinkRequest->setAlias($alias);
-        $directLinkRequest->setAmount(100);
-        $directLinkRequest->setCurrency('EUR');
-        $directLinkRequest->setEci(new Eci(Eci::ECOMMERCE_RECURRING));
-        $directLinkRequest->validate();
-
-        $body = array();
-        foreach($directLinkRequest->toArray() as $key => $value) {
-            $body[strtoupper($key)] = $value;
-        }
-
-        $body['SHASIGN'] = $directLinkRequest->getShaSign();
-
-        $client = new Client($directLinkRequest->getPostFinanceUri());
-        $request = $client->post(null, null, $body);
-        $response = $request->send();
-
-        $directLinkResponse = new DirectLinkPaymentResponse($response->getBody(true));
-
-        $this->assertTrue($directLinkResponse->isSuccessful());
-
-        return $alias;
-    }
-
-    /**
-     * @test
-     */
-    public function AliasIsCreatedByPostFinance()
-    {
-        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
-        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
-        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
-
-        $createAliasResponse = $this->provideAliasResponse(false);
-
-        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
-        $this->assertTrue($createAliasResponse->isSuccessful());
-    }
-
-    /**
-     * @test
-     */
-    public function CreateAliasInvalid()
-    {
-        $passphraseOut = new Passphrase(PASSPHRASE_SHA_OUT);
-        $shaOutComposer = new AllParametersShaComposer($passphraseOut);
-        $shaOutComposer->addParameterFilter(new ShaOutParameterFilter());
-
-        $createAliasResponse = $this->provideAliasResponse(true, true);
-
-        $this->assertTrue($createAliasResponse->isValid($shaOutComposer));
-        $this->assertFalse($createAliasResponse->isSuccessful());
-    }
-
-
-    public function provideAliasResponse($createAlias = true, $noValidCardnumber = false)
-    {
-        /*
-         *  Create an alias request to PostFinance
-         */
-        $passphrase = new Passphrase(PASSPHRASE_SHA_IN);
-        $shaComposer = new AllParametersShaComposer($passphrase);
-
-        $createAliasRequest = new CreateAliasRequest($shaComposer);
-        $createAliasRequest->setPspid(PSPID);
-        $createAliasRequest->setAccepturl('http://www.example.com');
-        $createAliasRequest->setExceptionurl('http://www.example.com');
-
-        if($createAlias == true) {
-            $unique_alias = uniqid('customer_'); // create a unique alias
-            $alias = new Alias($unique_alias);
-            $createAliasRequest->setAlias($alias);
-        }
-
-        $createAliasRequest->validate();
-
-        $body = array();
-        foreach($createAliasRequest->toArray() as $key => $value) {
-            $body[strtoupper($key)] = $value;
-        }
-
-        $body['SHASIGN'] = $createAliasRequest->getShaSign();
-        $body['CN'] = 'Don Corleone';
-        $body['CARDNO'] = ($noValidCardnumber) ? '' : '4111111111111111'; // PostFinance Visa test cardnumber
-        $body['CVC'] = '777';
-        $body['ED'] = date('my', strtotime('+1 year')); // test-date should be in the future
-
-        $client = new Client($createAliasRequest->getPostFinanceUri());
-        $request = $client->post(null, null, $body);
-        $response = $request->send();
-
-        $url = parse_url($response->getInfo('url'));
-        $params = array();
-        parse_str($url['query'], $params);
-
-        /*
-         * Validate alias response from PostFinance
-         */
-
-        $createAliasResponse = new CreateAliasResponse($params);
-
-        return $createAliasResponse;
-    }
-}
diff --git a/tests/PostFinance/Tests/ParameterFilter/ShaInParameterFilterTest.php b/tests/PostFinance/Tests/ParameterFilter/ShaInParameterFilterTest.php
deleted file mode 100644
index 36e97a1..0000000
--- a/tests/PostFinance/Tests/ParameterFilter/ShaInParameterFilterTest.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\ShaComposer;
-
-use PostFinance\ParameterFilter\ShaInParameterFilter;
-
-class ShaInParameterFilterTest extends \TestCase
-{
-	/** @test */
-	public function RemovesUnwantedParameters()
-	{
-		$filter = new ShaInParameterFilter;
-		$result = $filter->filter(array('foo' => 'bar', 'orderId' => 123));
-		$this->assertEquals(array('ORDERID' => 123), $result);
-	}
-}
\ No newline at end of file
diff --git a/tests/PostFinance/Tests/ShaComposer/AllParametersShaComposerTest.php b/tests/PostFinance/Tests/ShaComposer/AllParametersShaComposerTest.php
deleted file mode 100644
index 280ea18..0000000
--- a/tests/PostFinance/Tests/ShaComposer/AllParametersShaComposerTest.php
+++ /dev/null
@@ -1,145 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\ShaComposer;
-
-use PostFinance\HashAlgorithm;
-use PostFinance\ParameterFilter\ShaOutParameterFilter;
-use PostFinance\Passphrase;
-use PostFinance\PaymentResponse;
-use PostFinance\ShaComposer\AllParametersShaComposer;
-
-class AllParametersShaComposerTest extends \TestCase
-{
-	/**
-	 * @test
-	 * @dataProvider provideSha1Request
-	 */
-	public function Sha1StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
-	{
-		$composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA1));
-		$composer->addParameterFilter(new ShaOutParameterFilter);
-		$this->assertEquals($expectedSha, $composer->compose($request));
-	}
-
-    /**
-     * @test
-     * @dataProvider provideSha256Request
-     */
-    public function Sha256StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
-    {
-        $composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA256));
-        $composer->addParameterFilter(new ShaOutParameterFilter);
-        $this->assertEquals($expectedSha, $composer->compose($request));
-    }
-
-    /**
-     * @test
-     * @dataProvider provideSha512Request
-     */
-    public function Sha512StringIsComposedCorrectly(PassPhrase $passphrase, array $request, $expectedSha)
-    {
-        $composer = new AllParametersShaComposer($passphrase, new HashAlgorithm(HashAlgorithm::HASH_SHA512));
-        $composer->addParameterFilter(new ShaOutParameterFilter);
-        $this->assertEquals($expectedSha, $composer->compose($request));
-    }
-
-	public function provideSha1Request()
-	{
-		$passphrase = new PassPhrase('Mysecretsig1875!?');
-
-		$expectedSha1 = 'B209960D5703DD1047F95A0F97655FFE5AC8BD52';
-		$request1 = $this->createMinimalParameterSet();
-
-		$expectedSha2 = 'D58400479DCEDD6B6C7E67D61FDC0CC9E6ED65CB';
-		$request2 = $this->createExtensiveParameterSet();
-
-
-
-		return array(
-			array($passphrase, $request1, $expectedSha1),
-			array($passphrase, $request2, $expectedSha2),
-		);
-	}
-
-    public function provideSha256Request()
-    {
-        $passphrase = new PassPhrase('Mysecretsig1875!?');
-
-        $expectedSha1 = 'FD15F9371F2B42E3CAEC53BF2576AC89AAEBF53FD8FBA8F0B2EA13EAA823189D';
-        $request1 = $this->createMinimalParameterSet();
-
-        $expectedSha2 = 'A06D4534724885350BA5350731B02F4083370F8C9EED59D1F1C5E2B78EC3C257';
-        $request2 = $this->createExtensiveParameterSet();
-
-        return array(
-            array($passphrase, $request1, $expectedSha1),
-            array($passphrase, $request2, $expectedSha2),
-        );
-    }
-
-    public function provideSha512Request()
-    {
-        $passphrase = new PassPhrase('Mysecretsig1875!?');
-
-        $expectedSha1 = '5377F95D498947BECC23E02C2C7DDE182EE1221F1A6629B091110DF653FE0C32FCACF5F9B87B4C5168FC12B7183095623750004355DE938A2B8DECC6DB6D9F62';
-        $request1 = $this->createMinimalParameterSet();
-
-        $expectedSha2 = '31B74E4E0C7BCE4DED9DEAA97D4D3FB419EF6E2FDBD98C18D340B276A9F751E747972A0469A74B73E4C41F38F0F3F58BAD8D7107CA54DF936569852887EB6BE4';
-        $request2 = $this->createExtensiveParameterSet();
-
-        return array(
-            array($passphrase, $request1, $expectedSha1),
-            array($passphrase, $request2, $expectedSha2),
-        );
-    }
-
-    protected function createMinimalParameterSet()
-    {
-        return array(
-            'currency' => 'EUR',
-            'ACCEPTANCE' => 1234,
-            'amount' => 15,
-            'BRAND' => 'VISA',
-            'CARDNO' => 'xxxxxxxxxxxx1111',
-            'NCERROR' => 0,
-            'PAYID' => 32100123,
-            'PM' => 'CreditCard',
-            'STATUS' => 9,
-            'orderID' => 12,
-            'unknownparam' => 'some value',
-        );
-    }
-
-    protected function createExtensiveParameterSet()
-    {
-        return array (
-            'orderID' => 'myorderid1678834094',
-            'currency' => 'EUR',
-            'amount' => '99',
-            'PM' => 'CreditCard',
-            'ACCEPTANCE' => 'test123',
-            'STATUS' => '9',
-            'CARDNO' => 'XXXXXXXXXXXX1111',
-            'ED' => '0312',
-            'CN' => 'Some Name',
-            'TRXDATE' => '01/10/11',
-            'PAYID' => '9126297',
-            'NCERROR' => '0',
-            'BRAND' => 'VISA',
-            'COMPLUS' => 'my feedbackmessage',
-            'IP' => '12.123.12.123',
-            'foo' => 'bar',
-        );
-    }
-
-}
diff --git a/tests/PostFinance/Tests/ShaComposer/FakeShaComposer.php b/tests/PostFinance/Tests/ShaComposer/FakeShaComposer.php
deleted file mode 100644
index 24f392a..0000000
--- a/tests/PostFinance/Tests/ShaComposer/FakeShaComposer.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\ShaComposer;
-
-use PostFinance\ShaComposer\ShaComposer;
-
-/**
- * Fake SHA Composer to decouple test from actual SHA composers
- */
-class FakeShaComposer implements ShaComposer
-{
-	const FAKESHASTRING = 'foo';
-
-	public function compose(array $responseParameters)
-	{
-		return self::FAKESHASTRING;
-	}
-}
\ No newline at end of file
diff --git a/tests/PostFinance/Tests/ShaComposer/LegacyShaComposerTest.php b/tests/PostFinance/Tests/ShaComposer/LegacyShaComposerTest.php
deleted file mode 100644
index e3e6e69..0000000
--- a/tests/PostFinance/Tests/ShaComposer/LegacyShaComposerTest.php
+++ /dev/null
@@ -1,79 +0,0 @@
-<?php
-
-/*
- * This file is part of the Wysow PostFinance package.
- *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
- * (c) Marlon BVBA <info@marlon.be>
- *
- * For the full copyright and license information, please view the LICENSE
- * file that was distributed with this source code.
- */
-
-namespace PostFinance\Tests\ShaComposer;
-
-use PostFinance\HashAlgorithm;
-use PostFinance\Passphrase;
-use PostFinance\PaymentResponse;
-use PostFinance\ShaComposer\LegacyShaComposer;
-
-class LegacyShaComposerTest extends \TestCase
-{
-	const PASSPHRASE = 'passphrase-set-in-ogone-interface';
-	const SHA1STRING = '66BF34D8B3EF2136E0C267BDBC1F708B8D75A8AA';
-	const SHA256STRING = '882D85FCCC6112A33D3B8A571C11723CAA6B642EED70843B35B15ABA0C2AD637';
-	const SHA512STRING = '8552200DD108CB5633A27D6D0A1FAB54378CB2385BFCEB27487992D16F5A7565E5DD4D38C0F2DB294213CD02E434F311021749E6DAB187357F786E3F199781CA';
-
-	/** @test */
-	public function Sha1StringCanBeComposed()
-	{
-		$aRequest = $this->provideRequest();
-
-		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA1));
-		$shaString = $composer->compose($aRequest);
-
-		$this->assertEquals(self::SHA1STRING, $shaString);
-	}
-
-	/** @test */
-	public function Sha256StringCanBeComposed()
-	{
-		$aRequest = $this->provideRequest();
-
-		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA256));
-		$shaString = $composer->compose($aRequest);
-
-		$this->assertEquals(self::SHA256STRING, $shaString);
-	}
-
-	/** @test */
-	public function Sha512StringCanBeComposed()
-	{
-		$aRequest = $this->provideRequest();
-
-		$composer = new LegacyShaComposer(new Passphrase(self::PASSPHRASE), new HashAlgorithm(HashAlgorithm::HASH_SHA512));
-		$shaString = $composer->compose($aRequest);
-
-		$this->assertEquals(self::SHA512STRING, $shaString);
-	}
-
-	private function provideRequest()
-	{
-		return array(
-			'ACCEPTANCE' => 'test123',
-			'AMOUNT' => '19.08',
-			'BRAND' => 'VISA',
-			'CARDNO' => 'XXXXXXXXXXXX1111',
-			'CN' => 'Marlon',
-			'CURRENCY' => 'EUR',
-			'ED' => '0113',
-			'IP' => '81.82.214.142',
-			'NCERROR' => 0,
-			'ORDERID' => 2101947639,
-			'PAYID' => 10673859,
-			'PM' => 'CreditCard',
-			'STATUS' => PaymentResponse::STATUS_AUTHORISED,
-			'TRXDATE' => '07/05/11'
-		);
-	}
-}
\ No newline at end of file
diff --git a/tests/TestCase.php b/tests/TestCase.php
index 3ffae06..9d2e694 100644
--- a/tests/TestCase.php
+++ b/tests/TestCase.php
@@ -1,9 +1,8 @@
 <?php
 
 /*
- * This file is part of the Wysow PostFinance package.
+ * This file is part of the Marlon PostFinance package.
  *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
  * (c) Marlon BVBA <info@marlon.be>
  *
  * For the full copyright and license information, please view the LICENSE
diff --git a/tests/bootstrap.php b/tests/bootstrap.php
index 741d674..f319275 100644
--- a/tests/bootstrap.php
+++ b/tests/bootstrap.php
@@ -1,9 +1,8 @@
 <?php
 
 /*
- * This file is part of the Wysow PostFinance package.
+ * This file is part of the Marlon PostFinance package.
  *
- * (c) Gaultier Boniface <gboniface@wysow.fr>
  * (c) Marlon BVBA <info@marlon.be>
  *
  * For the full copyright and license information, please view the LICENSE
